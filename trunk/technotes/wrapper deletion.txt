This technote describes how cpaf::gui::Objects are destroyed. From here on,
Wrapper refers to any cpaf::gui::Object or derivative, and Impl refers to any
cpaf::impl::gui::Object.

OBJECT DELETION IN A GLANCE (SUMMARY)
-Never use delete on Wrappers, only Wrapper::destroy.
-While processing the "widget_destroyed" event, the Impl object and all of its
children (and their Wrappers) are gauranteed to exist.
-After the "widget_destroyed" event is processed (this includes during
connect_after() event processing) the Impl objet and all of its children
(including their Wrappers) are gauranteed to have been destroyed.

Similar to object creation, object deletion in cpaf is done in several steps.
Lets say you want to delete a Window with no children (hereby referred to as
Wrapper).

1	Wrapper::destroy() is called.
2	Wrapper::destory deletes this Wrapper's Impl object.
3	Impl::~Impl is invoked, which deletes the native widget.
4	The system destroys the native widget, which causes the Impl object to
	send the "widget_destroyed" event.
5	Impl::~Impl deletes its Wrapper object.
6	Wrapper::~Wrapper is called which performs any necessary (non gui!)
	cleanup.
7	Impl::~Impl returns, causing Wrapper::destroy() to return.

It is important to note that Wrapper::destroy() was called here, which deleted
the Wrapper object. Delete was NOT USED to destroy the wrapper directly! Why
don't we allow delete to destroy objects? First, take a look at this ascii art.

                  _____     _____
  gui wrappers    | a |     | b |
                  |___|     |___|
                    |        /|\ 
                    |         |  
                  _\|/_     __|__
  implementations |   |     |   |
                  |___|     |___|
                    |        /|\ 
                    |         |  
                  _\|/_     __|__
  native          |   |---->|   |
                  |___|     |___|


Pretend that the Window we destroyed is "a", and that Window had a child "b".
When we destroyed "a", it deleted its Impl object, which destroyed its native
widget (hence the downward arrows). The act of destroying the native widget also
destroyed its child "b" (this was done by the system). The Impl object for "b"
realized that its native widget was destroyed, sent the "widget_destroyed" event,
and deleted its Wrapper "b" (hence the upward arrows).

So why can't you use delete directly on Wrappers? Well, how is an implementation
supposed to know wether or not to delete its wrapper? Implementations always
delete their wrapper objects. If you delete the Wrapper, and Wrapper::~Wrapper
deletes Impl, Impl::~Impl will try to delete Wrapper again. Double deletion!
Thats no good.

Another problem that arrises with deleting Impl from Wrapper::~Wrapper is when
you derive from Wrapper. Lets say we created MyWrapper, which connected an event
listener for "widget_destroyed". Now, delete MyWrapper. What happens first, is
that MyWrapper is fully destructed. The base class dtor, Wrapper::~Wrapper,
executes which deletes Impl. Impl::~Impl sends "widget_destroyed". Wait, the
object that was listening for this event was already destructed! If the event
listener MyWrapper connected accesses any member variables, game over, you just
crashed.

For these reasons, the deletion of Wrappers must be done only via
Wrapper::destroy(), never by delete. Even if you do directly invoke delete on a
Wrapper, nothing will happen! Most Wrapper dtors are empty, and the Impl object
won't be cleaned up unless you use Wrapper::destroy().