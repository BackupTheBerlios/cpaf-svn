This technote describes how cpaf::gui::Objects are created. From here on, Wrapper
refers to any cpaf::gui::Object or derivative, Impl refers to any
cpaf::impl::gui::Object, and Initializer refers to Wrapper::Initializer.

WRAPPER CREATION IN A GLANCE (SUMMARY)
-Before the "widget_created" event is recieved, the Wrapper object is gaurenteed
to not be wrapping an Impl object, and any function that works on the Impl object
must not be called. This mainly applies to the constructors for derived Wrappers.
-After the "widget_created" event is recieved, and during processing of this
event, the Wrapper object is gaurenteed to be initialized and wrapping the Impl
object.
-Widget creation in cpaf is strictly synchronous. Once Widget::create()
returns, the widget is ready for use.

WRAPPER CREATION IN DETAIL

The process of creating a wrapper using the create_widget template is as follows:

1.	create_widget<Wrapper>(Initializer) is called
2.	A new Wrapper is created with: new Wrapper;
2a.	The Wrapper default constructor creates an implementation object with
	create_implementation_widget<Wrapper::api_type>();
3.	Wrapper::create(Initializer) is called and passed the Initializer object.
3a.	Wrapper::create sends the initialization data to Impl which creates
	the native widget.
3b.	Creation of the native widget is fully completed before Wrapper::create
	returns.
4.	create_widget<>() returns the created wrapper

While synchronisity has been abstracted by these methods, the API in cpaf is
strictly synchronous over all ports. That is, the "widget_created" event is
gaurenteed to have been sent before Wrapper::create() returns.

Note that is not strictly necessary to use the create_widget<Wrapper> template.
You are free to create derived Wrappers with public constructors and public
create methods and call them without using create_widget<Wrapper. Be aware that
all Wrappers must be created on the heap and that creating them on the stack at
this time will create chaos in your application.