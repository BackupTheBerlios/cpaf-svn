CC = gcc
LD = g++
OBJ_DIR = build
OUTPUT_DIR = lib
TARGET = libcpaf_gui_win32.dll
INCLUDE_DIRS = -I include -I . -I C:\boost
CXXFLAGS = -pipe -D_DEBUG -DCPAF_WIN32 -DCPAF_BUILDING -DCPAF_DLL -ggdb -Wall
LD_FLAGS = -shared -fpic -Wl,-O1
LIBS = -lcomctl32 -lgdi32

SRC_OBJS =                      \
	$(OBJ_DIR)/gui/app.o        \
	$(OBJ_DIR)/gui/object.o     \
	$(OBJ_DIR)/gui/widget.o     \
	$(OBJ_DIR)/gui/toplevel.o   \
	$(OBJ_DIR)/gui/factory.o    \
	$(OBJ_DIR)/gui/gridbaglayout.o    \
	$(OBJ_DIR)/gui/layoutmanager.o    \
	$(OBJ_DIR)/gui/window.o     \
	$(OBJ_DIR)/gui/panel.o      \
	$(OBJ_DIR)/gui/button.o     \
	$(OBJ_DIR)/gui/textwidget.o \
	$(OBJ_DIR)/gui/entrybox.o   \
	$(OBJ_DIR)/gui/textbox.o    \
	$(OBJ_DIR)/gui/initializer/object.o     \
	$(OBJ_DIR)/gui/initializer/widget.o     \
	$(OBJ_DIR)/gui/initializer/window.o     \
	$(OBJ_DIR)/gui/initializer/panel.o      \
	$(OBJ_DIR)/gui/initializer/button.o     \
	$(OBJ_DIR)/gui/initializer/textwidget.o \
	$(OBJ_DIR)/gui/initializer/entrybox.o   \
	$(OBJ_DIR)/gui/initializer/textbox.o    \
	$(OBJ_DIR)/event/event.o    \
	$(OBJ_DIR)/event/id.o       \
	$(OBJ_DIR)/win32/app.o       \
	$(OBJ_DIR)/win32/exception.o  \
	$(OBJ_DIR)/win32/factory.o    \
	$(OBJ_DIR)/win32/widget.o     \
	$(OBJ_DIR)/win32/window.o     \
	$(OBJ_DIR)/win32/win.o        \
	$(OBJ_DIR)/win32/panel.o      \
	$(OBJ_DIR)/win32/button.o     \
	$(OBJ_DIR)/win32/entrybox.o   \
	$(OBJ_DIR)/win32/textbox.o    \
	$(OBJ_DIR)/win32/textwidget.o \
	$(OBJ_DIR)/types.o          \
	$(OBJ_DIR)/main.o           \
	$(OBJ_DIR)/exception.o      \
	$(OBJ_DIR)/app.o            \
	$(OBJ_DIR)/api.o

define build_target
	@echo Creating library...
	$(LD) $(LD_FLAGS) -o "$(OUTPUT_DIR)/$(TARGET)" $(SRC_OBJS) $(LIBS)
endef

define compile_source
	$(CC) $(CXXFLAGS) $(INCLUDE_DIRS) -c "$<" -o "$@"
endef

.PHONY: directories

$(TARGET): directories $(SRC_OBJS)
	$(build_target)

.PHONY: clean cleanall

install:
	@echo Installing not yet supported.

cleanall:
	@echo Deleting intermediate files.
	-@if exist "$(OUTPUT_DIR)" rmdir /s /q "$(OUTPUT_DIR)"
	-@if exist "$(OBJ_DIR)/gui/initializer" rmdir /s /q "$(OBJ_DIR)/gui/initializer"
	-@if exist "$(OBJ_DIR)/gui" rmdir /s /q "$(OBJ_DIR)/gui"
	-@if exist "$(OBJ_DIR)/event" rmdir /s /q "$(OBJ_DIR)/event"
	-@if exist "$(OBJ_DIR)/win32" rmdir /s /q "$(OBJ_DIR)/win32"
	-@if exist "$(OBJ_DIR)" del /q "$(OBJ_DIR)"\*.*
	-@if exist "$(OUTPUT_DIR)" rmdir /s /q "$(OUTPUT_DIR)"

clean: cleanall

directories:
	-@if not exist "$(OUTPUT_DIR)" mkdir "$(OUTPUT_DIR)"
	-@if not exist "$(OBJ_DIR)" mkdir "$(OBJ_DIR)"
	-@if not exist "$(OBJ_DIR)/gui" mkdir "$(OBJ_DIR)/gui"
	-@if not exist "$(OBJ_DIR)/gui/initializer" mkdir "$(OBJ_DIR)/gui/initializer"
	-@if not exist "$(OBJ_DIR)/event" mkdir "$(OBJ_DIR)/event"
	-@if not exist "$(OBJ_DIR)/win32" mkdir "$(OBJ_DIR)/win32"

$(OBJ_DIR)/gui/app.o: src/cpaf/gui/app.cpp
	$(compile_source)

$(OBJ_DIR)/gui/object.o: src/cpaf/gui/object.cpp
	$(compile_source)

$(OBJ_DIR)/gui/widget.o: src/cpaf/gui/widget.cpp
	$(compile_source)

$(OBJ_DIR)/gui/toplevel.o: src/cpaf/gui/toplevel.cpp
	$(compile_source)

$(OBJ_DIR)/gui/factory.o: src/cpaf/gui/factory.cpp
	$(compile_source)

$(OBJ_DIR)/gui/gridbaglayout.o: src/cpaf/gui/gridbaglayout.cpp
	$(compile_source)

$(OBJ_DIR)/gui/layoutmanager.o: src/cpaf/gui/layoutmanager.cpp
	$(compile_source)

$(OBJ_DIR)/gui/window.o: src/cpaf/gui/window.cpp
	$(compile_source)

$(OBJ_DIR)/gui/panel.o: src/cpaf/gui/panel.cpp
	$(compile_source)

$(OBJ_DIR)/gui/button.o: src/cpaf/gui/button.cpp
	$(compile_source)

$(OBJ_DIR)/gui/textwidget.o: src/cpaf/gui/textwidget.cpp
	$(compile_source)

$(OBJ_DIR)/gui/entrybox.o: src/cpaf/gui/entrybox.cpp
	$(compile_source)

$(OBJ_DIR)/gui/textbox.o: src/cpaf/gui/textbox.cpp
	$(compile_source)

$(OBJ_DIR)/gui/initializer/object.o: src/cpaf/gui/initializer/object.cpp
	$(compile_source)

$(OBJ_DIR)/gui/initializer/widget.o: src/cpaf/gui/initializer/widget.cpp
	$(compile_source)

$(OBJ_DIR)/gui/initializer/toplevel.o: src/cpaf/gui/initializer/toplevel.cpp
	$(compile_source)

$(OBJ_DIR)/gui/initializer/factory.o: src/cpaf/gui/initializer/factory.cpp
	$(compile_source)

$(OBJ_DIR)/gui/initializer/window.o: src/cpaf/gui/initializer/window.cpp
	$(compile_source)

$(OBJ_DIR)/gui/initializer/panel.o: src/cpaf/gui/initializer/panel.cpp
	$(compile_source)

$(OBJ_DIR)/gui/initializer/button.o: src/cpaf/gui/initializer/button.cpp
	$(compile_source)

$(OBJ_DIR)/gui/initializer/textwidget.o: src/cpaf/gui/initializer/textwidget.cpp
	$(compile_source)

$(OBJ_DIR)/gui/initializer/entrybox.o: src/cpaf/gui/initializer/entrybox.cpp
	$(compile_source)

$(OBJ_DIR)/gui/initializer/textbox.o: src/cpaf/gui/initializer/textbox.cpp
	$(compile_source)

$(OBJ_DIR)/event/event.o: src/cpaf/event/event.cpp
	$(compile_source)

$(OBJ_DIR)/event/id.o: src/cpaf/event/id.cpp
	$(compile_source)

$(OBJ_DIR)/win32/app.o: src/cpaf/win32/app.cpp
	$(compile_source)

$(OBJ_DIR)/win32/exception.o: src/cpaf/win32/exception.cpp
	$(compile_source)

$(OBJ_DIR)/win32/factory.o: src/cpaf/win32/factory.cpp
	$(compile_source)

$(OBJ_DIR)/win32/widget.o: src/cpaf/win32/widget.cpp
	$(compile_source)

$(OBJ_DIR)/win32/win.o: src/cpaf/win32/win.cpp
	$(compile_source)

$(OBJ_DIR)/win32/window.o: src/cpaf/win32/window.cpp
	$(compile_source)

$(OBJ_DIR)/win32/panel.o: src/cpaf/win32/panel.cpp
	$(compile_source)

$(OBJ_DIR)/win32/button.o: src/cpaf/win32/button.cpp
	$(compile_source)

$(OBJ_DIR)/win32/entrybox.o: src/cpaf/win32/entrybox.cpp
	$(compile_source)

$(OBJ_DIR)/win32/textbox.o: src/cpaf/win32/textbox.cpp
	$(compile_source)

$(OBJ_DIR)/win32/textwidget.o: src/cpaf/win32/textwidget.cpp
	$(compile_source)

$(OBJ_DIR)/types.o: src/cpaf/types.cpp
	$(compile_source)

$(OBJ_DIR)/main.o: src/cpaf/main.cpp
	$(compile_source)

$(OBJ_DIR)/exception.o: src/cpaf/exception.cpp
	$(compile_source)

$(OBJ_DIR)/app.o: src/cpaf/app.cpp
	$(compile_source)

$(OBJ_DIR)/api.o: src/cpaf/api.cpp
	$(compile_source)
